import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'java'
  id 'org.jastadd' version '1.13.3'
}

defaultTasks 'jar'

if (!file('extendj/jastadd_modules').exists()) {
  throw new GradleException('ExtendJ seems to be missing. Please run "git submodule init", then "git submodule update".')
}



jastadd {
  configureModuleBuild()

  modules {
    include("extendj/jastadd_modules") // Include core ExtendJ modules.

    module "intraj", {
      imports "java8 frontend" // ExtendJ dependency for intraj module.

      jastadd {
        basedir "src/jastadd/"
        include "**/*.ast"
        include "**/*.jadd"
        include "**/*.jrag"
      }
    }
  }

  // Target module to build:
  module = 'intraj'
  jastaddOptions = [ "--rewrite=cnta",
                     "--safeLazy",
                     "--visitCheck=false",
                     "--optimize-imports"]
  astPackage = 'org.extendj.ast'
  parser.name = 'JavaParser'
  scanner.name = 'OriginalScanner'
}

sourceSets.main {
  java {
    srcDir 'extendj/src/frontend-main'
    srcDir 'src/java'
  }
  resources {
    srcDir 'extendj/src/res'
    srcDir jastadd.buildInfoDir
  }
  repositories {
    mavenLocal()
    flatDir { dirs "tools" }
  }
  dependencies {
    jastadd2 name: "jastadd2"
  }
}

dependencies{
    testImplementation 'junit:junit:4.12'
    implementation 'junit:junit:4.12'
    implementation 'com.github.magpiebridge:magpiebridge:0.1.2'
}

sourceSets.test{
  java{
    srcDir 'src/java/test/'
  }
}

test {
   useJUnit()

  // testLogging.events 'passed', 'failed'

  // testLogging.exceptionFormat = 'full'

  dependsOn 'cleanTest'
}

// Use JavaCompiler if you need bytecode generation.
// jar {
//   manifest {
//     attributes(
//       'Main-Class': !project.hasProperty("className") ? 'org.extendj.IntraJ': project.getProperty("className").toString())
//   }
// }

task vsce(type:Exec) {
    workingDir "."

         commandLine 'sh', 'generate_vsce.sh'
         println "DETECTED OS: not windows. Running `generate_vsce.sh`"
    
    
    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}
vsce.dependsOn 'build'


task vscode(type: Jar) { 
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.extendj.IntraJ'
    }
    baseName = 'intraj'
    destinationDir= file('vscode')
}

task intraj(type: Jar) { 
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    from sourceSets.main.output
    manifest {
        attributes 'Main-Class': 'org.extendj.IntraJ'
    }
    baseName = 'intraj'
    destinationDir = projectDir
}

artifacts {
    archives  vscode, intraj;
}
//jar.manifest.attributes 'Main-Class': 'org.extendj.JavaCompiler'
jar.destinationDirectory = projectDir

// Java -source and -target version.
sourceCompatibility = targetCompatibility = '1.8'

task sourceZip(type: Zip) {
  description 'Builds a Zip file with the entire repisotory (including the ExtendJ submodule).'
  destinationDirectory = projectDir
  archiveFileName = "intraj-src.zip"

  from (projectDir) {
    exclude '**/.git'
    exclude '**/.gitignore'
    exclude '**/.gitattributes'
    exclude '**/.gitmodules'
    exclude 'build'
    exclude 'bin'
    exclude '.gradle'
    exclude '.classpath'
    exclude '.settings'
    exclude '.project'
    exclude '*.jar'
    exclude '*.zip'
    exclude '**/*.swp'
  }

  into 'intraj'
}
