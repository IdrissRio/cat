/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import org.extendj.IntraJ;
aspect DAA {
  
  // True <==> LVA_def() âˆ©  LVA_out() = emptyset
  syn boolean CFGNode.isDead() // = !LVA_def().compl(LVA_out()).isEmpty();
  {
    Iterator iter = LVA_def().iterator();
    while (iter.hasNext()) {
      if (LVA_out().contains(iter.next())) {
        return false;
      }
    }
    return true;
  }

  syn Boolean CFGNode.DAA_isDeadAssign() = false;
  eq VariableDeclarator.DAA_isDeadAssign() {
    return hasInit() &&             // The RHS is not null
           !type().isArrayDecl() && // Is not an array declaration
           !isFinal() &&            // Is not declared final
           (!IntraJ.excludeLiteralsAndNull ||
            !getInit().isUsualDefaultValue()) && // Is not a default value
           getDeclaration().isLocalVariable() && // Is a local variable
           isDead();                             // Is dead
  }
  eq AssignExpr.DAA_isDeadAssign() {
    return !LVA_def().isEmpty() &&           // The assignment is a definition
           !getDest().varDecl().isFinal() && // The L-value is not final
                   (getDeclaration().isLocalVariable() || // The def is a local vriable
            (getDeclaration().isMethodParameter() &&
             getDeclaration().type().isPrimitiveType())) &&
           isDead();
  }

  eq UnaryIncDec.DAA_isDeadAssign() =
      getDeclaration() != null && exprAsStmt() &&
      getDeclaration().isLocalVariable() && isDead();

  /**************************************************************************
  ***************************ERROR COLLECTION********************************
  ***************************************************************************
  */

  AssignExpr contributes warning(
      getCompilationUnit().pathName(),
      "The value stored in '" + getDest().varDecl().name() + "' is never read.",
      Analysis.DAA) when
  DAA_isDeadAssign() to CompilationUnit.DAA();

  VariableDeclarator contributes warning(
      getCompilationUnit().pathName(),
      "The value stored in '" + singletonValue().name() + "' is never read.",
      Analysis.DAA) when
  DAA_isDeadAssign() to CompilationUnit.DAA();

  UnaryIncDec contributes warning(getCompilationUnit().pathName(),
                                  "The value stored in '" +
                                      getOperand().varDecl().name() +
                                      "' is never read.",
                                  Analysis.DAA) when
  DAA_isDeadAssign() to CompilationUnit.DAA();

  /**************************************************************************
  ***************************HELPERS ****************************************
  ***************************************************************************
  */

  syn boolean Expr.isUsualDefaultValue()  = false;
  eq MinusExpr.isUsualDefaultValue() = getOperand().isUsualDefaultValue();
  eq PlusExpr.isUsualDefaultValue() = getOperand().isUsualDefaultValue();
  eq StringLiteral.isUsualDefaultValue() = getLITERAL().equals("");
  eq NullLiteral.isUsualDefaultValue() = true;
  eq BooleanLiteral.isUsualDefaultValue() = true;
  eq ParExpr.isUsualDefaultValue() = getExpr().isUsualDefaultValue();
  eq IntegerLiteral.isUsualDefaultValue() {
    String lit = getLITERAL();
    return (lit.equals("0") || lit.equals("1") || lit.equals("-1"));
  }

  syn Boolean CFGNode.inTryCatch() = getEnclosingTry() != null;
}