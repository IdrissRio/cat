
// Forward-may analysis
aspect PurityAnlysis {

public
  interface Unpure {}

  FieldDeclarator implements Unpure;
  MethodDecl implements Unpure;
  ParameterDeclaration implements Unpure;
  ConstructorDecl implements Unpure;
  VariableDeclarator implements Unpure;

  inh CompilationUnit Unpure.getCompilationUnit();

  syn nta Annotation CompilationUnit.getPure() =
      new Annotation("Pure", new TypeAccess("", "Pure"), new List());
  syn nta Annotation CompilationUnit.getFresh() =
      new Annotation("Fresh", new TypeAccess("", "Fresh"), new List());
  syn nta Annotation CompilationUnit.getLocal() =
      new Annotation("Local", new TypeAccess("", "Local"), new List());

  syn SmallSet<Annotation> Unpure.getAnnotation() {
    SmallSet<Annotation> result = SmallSet.mutable();
    for (Modifier m : getModifiers().getModifiers()) {
      if (m.isAnnotation()) {
        Annotation ann = (Annotation)m;
        switch (ann.getAccess().toString()) {
        case "Pure":
          result.add(getCompilationUnit().getPure());
          break;
        case "Fresh":
          result.add(getCompilationUnit().getFresh());
          break;
        case "Local":
          result.add(getCompilationUnit().getLocal());
          break;
        }
      }
    }
    return result;
  }

  syn Boolean Unpure.isFresh(MethodDecl m) {
    return m.getAnnotation().contains(getCompilationUnit().getFresh());
  }

  syn Boolean Unpure.isLocal(FieldDeclarator f) {
    return f.getAnnotation().contains(getCompilationUnit().getLocal());
  }

  syn Boolean Unpure.isLocal(MethodDecl m, Integer i) {
    return m.getParameter(i).getAnnotation().contains(
        getCompilationUnit().getLocal());
  }

  syn Boolean Unpure.isImpure(MethodDecl m) {
    Boolean result =
        !m.getAnnotation().contains(getCompilationUnit().getPure());
    for (ParameterDeclaration p : m.getParameterList()) {
      Unpure up = (Unpure)p;
      result = result &&
               !up.getAnnotation().contains(getCompilationUnit().getLocal());
    }
    return result;
  }

public
  Boolean Unpure.isLocalOrFresh(Set<AbsRef> abs) {
    Boolean res = true;
    for (AbsRef a : abs) {
      res = res && a.getUnpure().getAnnotation().contains(
                       getCompilationUnit().getLocal());
    }
    return res;
  }

  syn Env CFGNode.PURE_in() {
    Env res = new Env();
    for (CFGNode p : pred()) {
      res.join(p.PURE_out());
    }
    return res;
  }

  eq Entry.PURE_in() {
    Env res = new Env();
    MethodDecl m = (MethodDecl)getEnclosingMethod();
    for (ParameterDeclaration p : m.getParameterList()) {
      AbsRef ar = new AbsRef(p, p.name());
      res.add(p.singletonValue(), ar);
    }
    return res;
  }

  syn Env CFGNode.PURE_out() { return transFunc(PURE_in()); }

  syn Env CFGNode.transFunc(Env env) { return env; }

  eq VariableDeclarator.transFunc(Env env) {
    Env res = new Env(env);
    if (!hasInit()) {
      return res;
    }
    if (getInit().isConstant() || getInit().isNullLiteral()) {
      res.add(this, AbsRef.freshObject());
    } else if (getInit().isVariable()) {
      for (AbsRef ar : env.getMapFun().get(getInit().varDecl()))
        res.add(this, ar);
    }
    return res;
  }

  eq AssignExpr.transFunc(Env env) {
    Env res = new Env(env);
    RULE_SV(res);
    RULE_SC(res);
    RULE_SM(res);
    return res;
  }

  syn Boolean Modifier.isAnnotation() = false;
  eq Annotation.isAnnotation() = true;

  syn boolean MethodDecl.isPure() { return false; }

  inh Object Entry.getEnclosingMethod();
  eq CFGRoot.entry().getEnclosingMethod() = this;
  eq CompilationUnit.getChild().getEnclosingMethod() {
    throw new RuntimeException(
        "Reached root of getEnclosingMethod() without a solution");
  }

  MethodDecl contributes warning(getCompilationUnit().pathName(),
                                 "The method '" + name() + "' is not pure",
                                 Analysis.AvailableAnalysis.PURE) when !isPure()
      to CompilationUnit.PURE();

  /************************************RULES *********************************/
public
  Env AssignExpr.RULE_SC(Env env) {
    if (getSource().isVariable()) {
      env.add(getDest().varDecl(), env.getMapFun().get(getSource().varDecl()));
    }
    return env;
  }

public
  Env AssignExpr.RULE_SV(Env env) {
    if (getSource().isConstant() || getSource().isNullLiteral()) {
      env.add(getDest().varDecl(), AbsRef.freshObject());
    }
    return env;
  }

public
  Env AssignExpr.RULE_SM(Env env) {
    Dot dot = null;
    if (getSource().getDotMethodAccess() != null) {
      dot = (Dot)getSource().getDotMethodAccess();
      MethodDecl m = ((MethodAccess)dot.getRight()).decl();
      Boolean res = !m.isImpure(m);
      FieldDeclarator f = (FieldDeclarator)((VarAccess)dot.getLeft()).varDecl();
      res = res && (!f.isLocal(f) || f.isLocalOrFresh(env.getMapFun().get(f)));
      for (int i = 0; i < m.getNumParameter(); i++) {
        res = res && (!m.isLocal(m, i) ||
                      m.isLocalOrFresh(env.getMapFun().get(m.getParameter(i))));
      }
      if (res) {
        if (m.isFresh(m)) {
          env.add(getDest().varDecl(), AbsRef.freshObject());
        } else {
          env.add(getDest().varDecl(), AbsRef.unknownObject());
        }
      }
    }
    return env;
  }

  /****************************** ATTRIBUTE HELPERS *************************/

  syn Boolean Expr.isDot() = false;
  eq Dot.isDot() = true;

  syn Dot Expr.getDotMethodAccess() { return null; }

  eq Dot.getDotMethodAccess() {
    if (getRight().isMethodAccess() && getLeft().isFieldAccess()) {
      return this;
    }
    return null;
  }
  /******************************ABSTRACT OBJECTS****************************/

  /***********************************************************************
   ************************ Abstract Reference Class *********************
   ***********************************************************************/
public
  class AbsRef {
  private
    String name;
  private
    Unpure unpure;

  private
    static AbsRef freshObject = new AbsRef(null, "__Epsilon");
  private
    static AbsRef unknownObject = new AbsRef(null, "__Unknown");

  public
    AbsRef(Unpure unpure, String name) {
      this.unpure = unpure;
      this.name = name;
    }
  public
    Unpure getUnpure() { return unpure; }

  public
    static AbsRef freshObject() { return freshObject; }

  public
    static AbsRef unknownObject() { return unknownObject; }

  public
    String toString() { return "Abs(" + name + ")"; }
  }

  /***********************************************************************
   ************************ Abstract Environment Class *******************
   ***********************************************************************/
  public class Env {
    Map<Variable, Set<AbsRef>> mapFun = new LinkedHashMap<>();

  public
    Env() {}

  public
    Env(Env e) { this.mapFun = new LinkedHashMap<>(e.getMapFun()); }

  public
    Env(Map<Variable, Set<AbsRef>> mapFun) { this.mapFun = mapFun; }

  public
    void add(Variable v, AbsRef ar) {
      mapFun.put(v, Collections.singleton(ar));
    }

  public
    void add(Variable v, Set<AbsRef> set_ar) { mapFun.put(v, set_ar); }

  public
    Map<Variable, Set<AbsRef>> getMapFun() { return mapFun; }

    /** Method without side-effects */
  public
    static Env join(Env ar1, Env ar2) {
      Map<Variable, Set<AbsRef>> res = new LinkedHashMap<>();
      for (Map.Entry<Variable, Set<AbsRef>> entry :
           ar1.getMapFun().entrySet()) {
        Set<AbsRef> tmp = res.get(entry.getKey());
        tmp.addAll(ar2.getMapFun().get(entry.getKey()));
        res.put(entry.getKey(), tmp);
      }

      for (Map.Entry<Variable, Set<AbsRef>> entry :
           ar2.getMapFun().entrySet()) {
        Set<AbsRef> tmp = res.get(entry.getKey());
        tmp.addAll(ar1.getMapFun().get(entry.getKey()));
        res.put(entry.getKey(), tmp);
      }

      return new Env(res);
    }

    /** Method with side-effects */
  public
    void join(Env ar1) {
      Map<Variable, Set<AbsRef>> res = new LinkedHashMap<>();
      for (Map.Entry<Variable, Set<AbsRef>> entry : mapFun.entrySet()) {
        Set<AbsRef> tmp = mapFun.get(entry.getKey());
        if (tmp == null) {
          tmp = new LinkedHashSet<>();
        }
        try {
          tmp.addAll(ar1.getMapFun().get(entry.getKey())); // TODO(idrissrio):
          // exception are too
          // expensive. Improve
          // this.
        } catch (NullPointerException t) {
        }
        res.put(entry.getKey(), tmp);
      }

      for (Map.Entry<Variable, Set<AbsRef>> entry :
           ar1.getMapFun().entrySet()) {
        Set<AbsRef> tmp = ar1.getMapFun().get(entry.getKey());
        if (tmp == null) {
          tmp = new LinkedHashSet<>();
        }
        try {
          tmp.addAll(mapFun.get(entry.getKey())); // TODO(idrissrio): exception
                                                  // are too expensive. Improve
                                                  // this.
        } catch (NullPointerException t) {
        }
        res.put(entry.getKey(), tmp);
      }
      mapFun.clear();
      mapFun = res;
    }
  }
}