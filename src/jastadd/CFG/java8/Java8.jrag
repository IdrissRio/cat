/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect CFG_java8 {
  MethodReference implements CFGNode;
  ConstructorReference implements CFGNode;
  LambdaExpr implements CFGRoot;
  LambdaBody implements CFGNode;
  LambdaDefinition implements CFGNode;

  eq ConstructorReference.firstNodes() = dynamicFN();
  eq MethodReference.firstNodes() = dynamicFN();
  eq ExprMethodReference.firstNodes() = getExpr().firstNodes();
  eq ExprMethodReference.getExpr().nextNodes() = dynamicFN();

  syn nta LambdaDefinition LambdaExpr.lambdaDefinition() =
      new LambdaDefinition();
  eq BlockLambdaBody.firstNodes() = getBlock().firstNodes();
  eq ExprLambdaBody.firstNodes() = getExpr().firstNodes();
  eq LambdaExpr.firstNodes() = lambdaDefinition().firstNodes();
  eq LambdaDefinition.firstNodes() = dynamicFN();
  eq LambdaExpr.lambdaDefinition().nextNodes() = nextNodes();
  eq LambdaExpr.entry().nextNodes() = getLambdaBody().firstNodes();
  eq LambdaExpr.getLambdaBody().nextNodes() = exit().firstNodes();

  inh LambdaExpr LambdaDefinition.getLambda();
  eq LambdaExpr.getChild().getLambda() = this;
  eq Program.getChild().getLambda() = null;

  LambdaExpr contributes nta lambdaDefinition() to CFGNode.predColl();
  LambdaExpr contributes nta entry() to CFGNode.predColl();
  LambdaExpr contributes nta exit() to CFGNode.predColl();
}