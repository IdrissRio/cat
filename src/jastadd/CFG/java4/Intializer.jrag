/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect Initializer {
  /**
   * 2 Different kind of "Entry Point" for the analysis:
   *    * CONSTRUCTOR DECLARATIONS
   *    * METHODS
   */
  eq MethodDecl.entry().nextNodes() =
      (hasBlock() ? getBlock().firstNodes()
                  : SmallSet.<CFGNode>singleton(exit()));
  eq MethodDecl.getBlock().nextNodes() = SmallSet.<CFGNode>singleton(exit());

  syn nta Implicit ConstructorDecl.implicit() =
      new Implicit("Instance", new List());
  eq ConstructorDecl.entry().nextNodes() =
      hasParsedConstructorInvocation()
          ? getParsedConstructorInvocation().firstNodes()
          : getImplicitConstructorInvocation().firstNodes();
  eq ConstructorDecl.getImplicitConstructorInvocation().nextNodes() =
      hasParsedConstructorInvocation() ? SmallSet.<CFGNode>empty() /**/
                                       : implicit().firstNodes();

  eq ConstructorDecl.getParsedConstructorInvocation().nextNodes() =
      getParsedConstructorInvocation().isSuperConstructorAccess()
          ? implicit().firstNodes()
          : implicit().nextNodes();
  eq ConstructorDecl.implicit().nextNodes() = getBlock().firstNodes();
  eq ConstructorDecl.getBlock().nextNodes() =
      SmallSet.<CFGNode>singleton(exit());

  /*************************** IMPLICIT CALLS *********************************/

  eq ClassDecl.staticInitialization().nextNodes() {
    for (int i = 0; i < getNumBodyDecl(); ++i) {
      if (!getBodyDecl(i).isStaticInit() ||
          getBodyDecl(i).isConstructorOrMethod())
        continue;
      return getBodyDecl(i).firstNodes();
    }
    return staticInitialization().exit().firstNodes();
  }

  eq ClassDecl.instanceInitialization().nextNodes() {
    for (int i = 0; i < getNumBodyDecl(); ++i) {
      if (getBodyDecl(i).isStaticInit() ||
          getBodyDecl(i).isConstructorOrMethod())
        continue;
      return getBodyDecl(i).firstNodes();
    }
    return instanceInitialization().exit().firstNodes();
  }

  eq ClassDecl.getBodyDecl(int index).nextNodes() {
    BodyDecl current = getBodyDecl(index);
    if (current.isStaticInit()) {
      for (int i = index + 1; i < getNumBodyDecl(); ++i) {
        if (!getBodyDecl(i).isStaticInit() ||
            getBodyDecl(i).isConstructorOrMethod())
          continue;
        return getBodyDecl(i).firstNodes();
      }
      return staticInitialization().exit().firstNodes();
    }
    if (!current.isStaticInit() && !current.isConstructorOrMethod()) {
      for (int i = index + 1; i < getNumBodyDecl(); ++i) {
        if (getBodyDecl(i).isStaticInit() ||
            getBodyDecl(i).isConstructorOrMethod())
          continue;
        return getBodyDecl(i).firstNodes();
      }
      return instanceInitialization().exit().firstNodes();
    }
    return SmallSet.<CFGNode>empty();
  }

  syn nta InstanceInitialization ClassDecl.instanceInitialization() =
      new InstanceInitialization(new Modifiers(new List()),
                                 new TypeAccess("", ""), "Instance", new List(),
                                 new List(), new Opt());

  syn nta InstanceInitialization ClassDecl.staticInitialization() =
      new InstanceInitialization(new Modifiers(new List()),
                                 new TypeAccess("", ""), "Static", new List(),
                                 new List(), new Opt());

  eq ClassDecl.getBodyDecl(int index).entry() {
    if (getBodyDecl(index).isStaticInitializer() ||
        getBodyDecl(index).isStaticFieldDecl()) {
      return staticInitialization().entry();
    } else
      return instanceInitialization().entry();
  }

  eq InstanceInitialization.firstNodes() = SmallSet.<CFGNode>singleton(entry());
  eq InstanceInitialization.exit().nextNodes() = SmallSet.<CFGNode>empty();
  eq InstanceInitialization.getChild().nextNodes() = SmallSet.<CFGNode>empty();
  eq InstanceInitialization.entry().nextNodes() = nextNodes();

  eq InstanceInitializer.firstNodes() = getBlock().firstNodes();
  eq StaticInitializer.firstNodes() = getBlock().firstNodes();
}