/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import com.ibm.wala.cast.tree.CAstSourcePositionMap.Position;
import com.ibm.wala.util.collections.Pair;
import org.extendj.magpiebridge.ResultPosition;
import org.extendj.analysis.Analysis;

aspect Analysis {
  /**
   * Analysis identifier.
   */
  // public
  //   enum Analysis {
  //     PURE, DAA, NPA, STREQ;

  //     public static String[] names(){
  //         String valuesStr = Arrays.toString(Analysis.values());
  //         return valuesStr.substring(1, valuesStr.length() - 1)
  //             .replace(" ", "")
  //             .split(",");}
  // }

  coll TreeSet<WarningMsg> CompilationUnit
      .PURE()[new TreeSet<WarningMsg>()] with add root CompilationUnit;

  coll TreeSet<WarningMsg> CompilationUnit
      .STREQ()[new TreeSet<WarningMsg>()] with add root CompilationUnit;

  coll TreeSet<WarningMsg> CompilationUnit
      .DAA()[new TreeSet<WarningMsg>()] with add root CompilationUnit;

  coll Set<WarningMsg> CompilationUnit.NPA()[new TreeSet<WarningMsg>()] with add
      root CompilationUnit;

  coll Set<CFGRoot> Program.CFGRoots()[new LinkedHashSet<>()] with add root
      Program;
  CFGRoot contributes this to Program.CFGRoots();
  ClassDecl contributes nta staticInitialization() to Program.CFGRoots();
  ClassDecl contributes nta instanceInitialization() to Program.CFGRoots();

  coll Set<CFGRoot> CompilationUnit.CFGRoots()[new LinkedHashSet<>()] with add
      root CompilationUnit;
  CFGRoot contributes this to Program.CFGRoots();
  ClassDecl contributes nta staticInitialization()
      to CompilationUnit.CFGRoots();
  ClassDecl contributes nta instanceInitialization()
      to CompilationUnit.CFGRoots();

  /**This class contains all the information related to a specific warning:
   * Location: file path.
   * Analysis: analysis identifier.
   * LineStart, ColumnStart, LineEnd, ColumnEnd: are source code location.
   * errMsg: contains a description of the error message.
   */

public
class WarningMsg implements Comparable<WarningMsg> {
public
  final Integer lineStart, columnStart, lineEnd, columnEnd;
public
  final String errMsg;
  final Analysis.AvailableAnalysis analysis;
  final String loc;
public
  final Pair<Position, String> repair;
public
  final java.util.List<Pair<Position, String>> relatedInfo;

public
  WarningMsg(String loc, Analysis.AvailableAnalysis analysis, Integer lineStart,
             Integer columnStart, Integer lineEnd, Integer columnEnd,
             String errMsg, Pair<Position, String> repair,
             java.util.List<Pair<Position, String>> relatedInfo) {
    this.analysis = analysis;
    this.lineStart = lineStart;
    this.lineEnd = lineEnd;
    this.errMsg = errMsg;
    this.loc = loc;
    this.columnEnd = columnEnd;
    this.columnStart = columnStart;
    this.repair = repair;
    this.relatedInfo = relatedInfo;
  }

public
  void print(PrintStream out) {
    Utils.printWarning(out,
                       analysis.name() + " - " + loc + ":" + lineStart + "," +
                           columnStart,
                       errMsg);
  }

public
  int compareTo(WarningMsg other) {
    if (lineStart.equals(other.lineStart)) {
      if (columnStart != null) {
        if (columnStart.equals(other.columnStart))
          return errMsg.compareTo(other.errMsg);
        else {
          if (columnStart != null && other.columnStart != null)
            return Integer.compare(columnStart, other.columnStart);
          else {
            if (columnStart == null) {
              return -1;
            } else {
              return 1;
            }
          }
        }
      } else {
        return Integer.compare(columnEnd, other.columnEnd);
      }
    } else {
      return Integer.compare(lineStart, other.lineStart);
    }
  }

public
  Analysis.AvailableAnalysis getAnalysisType() { return analysis; }

} // End of class WarningMsg

protected WarningMsg ASTNode.warning(
    String loc, String msg, Analysis.AvailableAnalysis analysis,
    Pair<Position, String> repair,
    java.util.List<Pair<Position, String>> relatedInfo) {
  return new WarningMsg(loc, analysis, lineStart(), columnStart() - 1,
                        lineEnd(), columnEnd(), msg, repair, relatedInfo);
}

inh Boolean UnaryIncDec.exprAsStmt();
eq ExprStmt.getChild().exprAsStmt() = (getExpr() instanceof UnaryIncDec);
eq CompilationUnit.getChild().exprAsStmt() = false;

inh CompilationUnit ASTNode.getCompilationUnit();
eq CompilationUnit.getChild().getCompilationUnit() = this;
eq Program.getChild().getCompilationUnit() = null;
}