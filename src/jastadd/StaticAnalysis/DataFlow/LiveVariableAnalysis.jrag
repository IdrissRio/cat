/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect LiveVariableAnalysis {
public
  interface UnaryIncDec {}
  PostfixExpr implements UnaryIncDec;
  PreIncExpr implements UnaryIncDec;
  PreDecExpr implements UnaryIncDec;

public
  interface CompoundAssignment {}
  AssignBitwiseExpr implements CompoundAssignment;
  AssignShiftExpr implements CompoundAssignment;
  AssignMultiplicativeExpr implements CompoundAssignment;
  AssignAdditiveExpr implements CompoundAssignment;

  /**
   * For compound assignment the l-value is read therefore is considered a use.
   * The compound stmt
   */
  eq CompoundAssignment.LVA_use() = getVarDeclSet();

  /****************************************************************************
   ***************************** DEF sets *************************************
   ****************************************************************************
   */
  syn BitSet CFGNode.LVA_def()  = emptyBitSet();
  eq VariableDeclarator.LVA_def() = emptyBitSet().singleton(singletonValue());
  eq AssignExpr.LVA_def() =getVarDeclSet();
  eq UnaryIncDec.LVA_def() = getVarDeclSet();
  eq ImplicitAssignment.LVA_def() = emptyBitSet();

  /****************************************************************************
   ***************************** USE sets *************************************
   ****************************************************************************
   */
  syn BitSet CFGNode.LVA_use()  = emptyBitSet();
  eq VarAccess.LVA_use() = getVarDeclSet();
  eq UnaryIncDec.LVA_use() = getVarDeclSet();
 
  /****************************************************************************
   ***************************** OUT sets *************************************
   ****************************************************************************
   */
  syn BitSet CFGNode.LVA_out() {
    BitSet res = emptyBitSet().mutable();
    for (CFGNode e : succ()) {
      res.add(e.LVA_in());
    }
    return res;
  }


  /****************************************************************************
   ***************************** IN sets **************************************
   ****************************************************************************
   */
  syn BitSet CFGNode.LVA_in() circular[emptyBitSet().mutable()] = LVA_out();
  eq VariableDeclarator.LVA_in() = LVA_use().union(LVA_out().compl(LVA_def()));
  eq AssignExpr.LVA_in() = LVA_use().union(LVA_out().compl(LVA_def()));
  eq UnaryIncDec.LVA_in() = LVA_use().union(LVA_out().compl(LVA_def()));
  eq VarAccess.LVA_in() = LVA_use().union(LVA_out().compl(LVA_def()));
 

  /****************************************************************************
   ***************************** GETVARDECLSET    *****************************
   ****************************************************************************
   */

syn BitSet Expr.getVarDeclSet() = emptyBitSet();
eq VarAccess.getVarDeclSet() =
    (!isDest()) ? emptyBitSet().singleton(decl()) : emptyBitSet();
eq UnaryIncDec.getVarDeclSet() =
    (getOperand().varDecl() != null)
        ? emptyBitSet().singleton(getOperand().varDecl())
        : emptyBitSet();
eq AssignExpr.getVarDeclSet() =
    (getDest().varDecl() != null)
        ? emptyBitSet().singleton(getDest().varDecl())
        : emptyBitSet();
}
