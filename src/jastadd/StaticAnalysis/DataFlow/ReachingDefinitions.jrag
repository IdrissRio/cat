/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect ReachingDefinitions {

  /****************************************************************************
   ***************************** DEF sets *************************************
   ****************************************************************************
   */
  syn BitSet CFGNode.RDgen() = emptyBitSet();
  eq VariableDeclarator.RDgen() = emptyBitSet().singleton(this);
  eq AssignExpr.RDgen() = emptyBitSet().singleton(this);
  eq UnaryIncDec.RDgen() = emptyBitSet().singleton(this);
  eq ImplicitAssignment.RDgen() = emptyBitSet().singleton(this);

  /****************************************************************************
   ***************************** USE sets *************************************
   ****************************************************************************
   */
  syn BitSet CFGNode.RDkill() = emptyBitSet();
  eq VariableDeclarator.RDkill() = getVarDeclSet();
  eq AssignExpr.RDkill() = getVarDeclSet();
  eq UnaryIncDec.RDkill() = getVarDeclSet();
  // eq ImplicitAssignment.RDkill() = getVarDeclSet();

  /****************************************************************************
   ***************************** OUT sets *************************************
   ****************************************************************************
   */
  syn BitSet CFGNode.RDin() {
    BitSet res = emptyBitSet().mutable();
    for (CFGNode e : pred()) {
      res.add(e.RDout());
    }
    return res;
  }

  /****************************************************************************
   ***************************** IN sets **************************************
   ****************************************************************************
   */
  syn BitSet CFGNode.RDout() circular[emptyBitSet().mutable()] = RDin();
  eq VariableDeclarator.RDout() {
    BitSet res = emptyBitSet().mutable();
    res = res.union(RDin());
    Iterator iter1 = RDin().iterator();
    while (iter1.hasNext()) {
      Iterator iter2 = RDkill().iterator();
      CFGNode killDeref = (CFGNode)iter1.next();
      Variable kill = (Variable)killDeref.getVarDeclSet().iterator().next();
      while (iter2.hasNext()) {
        if (iter2.next() == kill) {
          res = res.compl(killDeref);
        }
      }
    }
    res = res.union(RDgen());
    return res;
  }
  eq AssignExpr.RDout() {
    BitSet res = emptyBitSet().mutable();
    res = res.union(RDin());
    Iterator iter1 = RDin().iterator();
    while (iter1.hasNext()) {
      Iterator iter2 = RDkill().iterator();
      CFGNode killDeref = (CFGNode)iter1.next();
      Variable kill = (Variable)killDeref.getVarDeclSet().iterator().next();
      while (iter2.hasNext()) {
        if (iter2.next() == kill) {
          res = res.compl(killDeref);
        }
      }
    }
    res = res.union(RDgen());
    return res;
  }

  eq UnaryIncDec.RDout() {
    BitSet res = emptyBitSet().mutable();
    res = res.union(RDin());
    Iterator iter1 = RDin().iterator();
    while (iter1.hasNext()) {
      Iterator iter2 = RDkill().iterator();
      CFGNode killDeref = (CFGNode)iter1.next();
      Variable kill = (Variable)killDeref.getVarDeclSet().iterator().next();
      while (iter2.hasNext()) {
        if (iter2.next() == kill) {
          res = res.compl(killDeref);
        }
      }
    }
    res = res.union(RDgen());
    return res;
  }

  /****************************************************************************
   ***************************** GETVARDECLSET    *****************************
   ****************************************************************************
   */

  syn Set<CFGNode> CFGNode.rdin() {
    Iterator iter = RDin().iterator();
    Set<CFGNode> res = new HashSet<CFGNode>();
    while (iter.hasNext()) {
      res.add((CFGNode)iter.next());
    }
    return res;
  }
}
