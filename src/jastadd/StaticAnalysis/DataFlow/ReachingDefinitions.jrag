/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect ReachingDefinitions {

  syn CFGNode CFGNode.RDgen() = null;
  eq VariableDeclarator.RDgen() = this;
  eq AssignExpr.RDgen() = this;
  eq UnaryIncDec.RDgen() = this;

  /****************************************************************************
   ***************************** USE sets *************************************
   ****************************************************************************
   */
  syn CFGNode CFGNode.RDkill() = null;
  eq VariableDeclarator.RDkill() = getVarDecl();
  eq AssignExpr.RDkill() = getVarDecl();
  eq UnaryIncDec.RDkill() = getVarDecl();

  /****************************************************************************
   ***************************** OUT sets *************************************
   ****************************************************************************
   */
  syn Set<CFGNode> CFGNode.RDin() {
    Set<CFGNode> res = new HashSet<CFGNode>();
    for (CFGNode e : pred()) {
      res.addAll(e.RDout());
    }
    return res;
  }

  /****************************************************************************
   ***************************** IN sets **************************************
   ****************************************************************************
   */
  syn Set<CFGNode> CFGNode.RDout() circular[new HashSet<>()] = RDin();
  eq VariableDeclarator.RDout() {
    Set<CFGNode> res = new HashSet<>();
    res.addAll(RDin());
    for (CFGNode iter1 : RDin()) {
      Variable kill = iter1.getVarDecl();
      if (RDkill() == kill) {
        res.remove(iter1);
      }
    }
    res.add(RDgen());
    return res;
  }
  eq AssignExpr.RDout() {
    Set<CFGNode> res = new HashSet<>();
    res.addAll(RDin());
    for (CFGNode iter1 : RDin()) {
      Variable kill = iter1.getVarDecl();
      if (RDkill() == kill) {
        res.remove(iter1);
      }
    }
    res.add(RDgen());
    return res;
  }

  eq UnaryIncDec.RDout() {
    Set<CFGNode> res = new HashSet<>();
    res.addAll(RDin());
    for (CFGNode iter1 : RDin()) {
      Variable kill = iter1.getVarDecl();
      if (RDkill() == kill) {
        res.remove(iter1);
      }
    }
    res.add(RDgen());
    return res;
  }

  /****************************************************************************
   ***************************** GETVARDECLSET    *****************************
   ****************************************************************************
   */

  syn Variable CFGNode.getVarDecl() = null;
  eq VariableDeclarator.getVarDecl() = singletonValue();
  eq VarAccess.getVarDecl() = (!isDest()) ? decl() : null;
  eq UnaryIncDec.getVarDecl() =
      (getOperand().varDecl() != null) ? getOperand().varDecl() : null;
  eq AssignExpr.getVarDecl() =
      (getDest().varDecl() != null) ? getDest().varDecl() : null;
}
