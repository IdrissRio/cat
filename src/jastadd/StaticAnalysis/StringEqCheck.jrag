aspect STREQ {
  EQExpr contributes warning(
      getCompilationUnit().pathName(),
      "Use of '==' to compare strings is discouraged. Use 'equals()' instead.",
      Analysis.AvailableAnalysis.STREQ, null, getRelatedInfo()) when
      left()
          .type()
          .isString() &&
      right().type().isString() to CompilationUnit.STREQ();

  syn java.util.List<Pair<Position, String>> EQExpr.getRelatedInfo() {
    java.util.List<Pair<Position, String>> result = new ArrayList<>();

    result.add(
        Pair.make(getLeftOperand().getPosition(),
                  getLeftOperand().prettyPrint() + " is of type String"));
    result.add(
        Pair.make(getRightOperand().getPosition(),
                  getRightOperand().prettyPrint() + " is of type String"));
    return result;
  }

  syn Position ASTNode.getPosition() {
    try {

      IJPosition res =
          new IJPosition(lineStart(), lineEnd(), columnStart() - 1, columnEnd(),
                         getCompilationUnit().pathName());
      return res;
    } catch (Throwable t) {
    }
    return null;
  }

  syn Position Variable.getPosition() {
    try {
      IJPosition res =
          new IJPosition(lineStart(), lineEnd(), columnStart() - 1, columnEnd(),
                         getCompilationUnit().pathName());
      return res;
    } catch (Throwable t) {
    }
    return null;
  }

  // eq Expr.getPosition() {
  //   if (varDecl() != null)
  //     return varDecl().getPosition();
  //   return getPosition();
  // }
}
