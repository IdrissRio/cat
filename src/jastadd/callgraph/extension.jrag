/* Copyright (c) 2024, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect AllMethods {
  coll Set<InvocationTarget> Program.allMethods()[new HashSet<>()] with add root
      Program;
  InvocationTarget contributes this when visible() to Program.allMethods();

  syn boolean InvocationTarget.visible() = false;
  eq MethodDecl.visible() = true;
  eq ConstructorDecl.visible() = true;

  inh CompilationUnit InvocationTarget.enclosingCompilationUnit();
  eq CompilationUnit.getChild().enclosingCompilationUnit() = this;
  eq Program.getChild().enclosingCompilationUnit() = null;

public
  String Program.allMethodsToJson() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    sb.append("  \"methods\": [\n");
    int methodCount = 0;
    for (InvocationTarget m : allMethods()) {
      sb.append("    {\n");
      sb.append("      \"fullName\": \"" + m.targetSignature() + "\",\n");
      sb.append("      \"name\": \"" + m.methodName() + "\",\n");
      sb.append("      \"file\": \"" + m.enclosingCompilationUnit().pathName() +
                "\",\n");
      sb.append("      \"lineStart\": " + m.lineStart() + ",\n");
      sb.append("      \"packageName\": \"" + m.packageName() + "\"\n");
      sb.append("    }");
      if (++methodCount < allMethods().size()) {
        sb.append(",\n");
      }
    }
    sb.append("\n  ]\n");
    sb.append("}\n");
    return sb.toString();
  }

  syn String InvocationTarget.methodName() {
    String res = "";
    try {
      res = targetSignature().substring(targetSignature().indexOf("::") + 2,
                                        targetSignature().indexOf("("));
    } catch (Exception e) {
    }
    return res;
  }
  syn String InvocationTarget.packageName() =
      hostType().packageName() + "." + hostType().name();
  syn int InvocationTarget.lineStart() = getLine(getStart());
}