/* Copyright (c) 2023, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect CG2JSON {

  inh InvocationTarget InvocationTarget.entryPoint();
  eq Program.getChild().entryPoint() =
      getTarget(entryPointPackage, entryPointMethod);

  syn boolean InvocationTarget.isEntryPoint() = this == entryPoint();
public
  void Program.callGraph2JSON(PrintStream out, boolean forward) {
    InvocationTarget entryPoint =
        getTarget(entryPointPackage, entryPointMethod);
    out.println("{");
    out.println("  \"nodes\": [");
    ArrayList<InvocationTarget> all = new ArrayList<InvocationTarget>();
    if (forward)
      completeCallGraph(entryPoint, new HashSet<InvocationTarget>(), all);
    else
      completeCallGraphBackward(entryPoint, new HashSet<InvocationTarget>(),
                                all);
    for (int i = 0; i < all.size(); i++) {
      out.println("    {");
      InvocationTarget target = all.get(i);
      target.nodes2JSON(out);
      out.println("    }" + (i < all.size() - 1 ? "," : ""));
    }

    out.println("  ],");
    out.println("  \"edges\": [");
    boolean first = true;
    for (InvocationTarget target : all) {
      target.edges2JSON(out, first, forward);
      first = false;
    }
    out.println("  ]");
    out.println("}");
  }

public
  void Program.completeCallGraph(InvocationTarget target,
                                 Set<InvocationTarget> visited,
                                 ArrayList<InvocationTarget> cg) {
    if (visited.contains(target))
      return;
    visited.add(target);
    if (target.shouldBeConsiderAsMethod()) {
      cg.add(target);
    }
    for (InvocationTarget neighbor : target.cg()) {
      completeCallGraph(neighbor, visited, cg);
    }
    return;
  }

public
  void Program.completeCallGraphBackward(InvocationTarget target,
                                         Set<InvocationTarget> visited,
                                         ArrayList<InvocationTarget> cg) {
    if (visited.contains(target))
      return;
    visited.add(target);
    if (target.shouldBeConsiderAsMethod()) {
      cg.add(target);
    }
    for (InvocationTarget neighbor : target.reversedCG()) {
      completeCallGraphBackward(neighbor, visited, cg);
    }
    return;
  }

public
  void InvocationTarget.nodes2JSON(PrintStream out) {

    out.println("      \"methodName\": \"" + targetSignature() + "\",");
    out.println("      \"sccId\": " + getSCCID() + ",");
    out.println("      \"uniqueSCCAndNoSelfLoop\": " + !inSCC() + ",");
    out.println("      \"path\": \"" + enclosingCompilationUnit().pathName() +
                ":" + getLine(getStart()) + "\",");
    out.println("      \"bridge\": false,");
    out.println("      \"paramTypes\": {");
    boolean isFirstParam = true;
    for (Map.Entry<String, String> entry : paramTypes().entrySet()) {
      if (!isFirstParam) {
        out.print(",\n");
      }
      out.print("        \"");
      out.print(entry.getKey());
      out.print("\": \"");
      out.print(entry.getValue());
      out.print("\"");
      isFirstParam = false;
    }
    out.print("\n      },\n");
    out.println("      \"kind\": [");
    for (int i = 0; i < getKindOfAttribute().size(); i++) {
      out.println("        \"" + getKindOfAttribute().get(i) + "\"" +
                  (i < getKindOfAttribute().size() - 1 ? "," : ""));
    }
    out.println("      ]");
  }
public
  void InvocationTarget.edges2JSON(PrintStream out, boolean first,
                                   boolean forward) {
    for (InvocationTarget neighbor : (forward ? cg() : reversedCG())) {
      out.println((first ? "    " : "   ,") + "    {");
      if (first) {
        first = false;
      }
      out.println("      \"source\": \"" + targetSignature() + "\",");
      out.println("      \"target\": \"" + neighbor.targetSignature() + "\"");
      out.println("    }");
    }
  }
}