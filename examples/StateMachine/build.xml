<!-- Targets for working from terminal window:
       build (default) - generates java files and compiles them
       test            - runs junit test cases
       clean           - removes all generated files and class files
       doc             - generates API documentation
     Targets for working from Eclipse:
       gen             - generates java files
       genClean        - removes all generated files and their class files
 -->

<project name="Compiler" default="build" basedir=".">

  <!-- "package" is the directory where generated files will be stored -->
  <property name="package" value="AST"/>

  <!-- "tools" is the directory where generators and libraries are located. -->
  <property name="tools" value="tools"/>
  
  <!-- where to put test reports --> 
  <property name = "test-reports.dir" value = "test-reports" />
    
  <!-- "jflex" is an ant task class for the scanner generator in JFlex.jar -->
  <taskdef name="jflex" classname="JFlex.anttask.JFlexTask" classpath="${tools}/JFlex.jar"/>

  <!-- "beaver" is an ant task class for the parser generator in beaver.jar -->
  <taskdef name="beaver" classname="beaver.comp.run.AntTask" classpath="${tools}/beaver.jar"/>

  <!-- "jastadd" is an ant task class in jastadd2.jar -->
  <taskdef classname="jastadd.JastAddTask" name="jastadd" classpath="${tools}/jastadd2.jar" />

  <!-- TARGET build: compile sources -->
  <target name="build" depends="gen">
    <!-- compile all java files in srcdir and recursively in subdirectories -->
    <javac debug="true" nowarn="true" srcdir="." classpath=".:${tools}/beaver-rt.jar:${tools}/junit.jar"
        includeantruntime="false"/>
  </target>

  <!-- TARGET gen: generate source files -->
  <target name="gen" depends="scanner,parser">
    <!-- create a directory for the generated files -->
    <mkdir dir="${basedir}/${package}"/>
    <!-- run jastadd to generate AST files -->
    <jastadd package="${package}" beaver="true" outdir="${basedir}" lineColumnNumbers="true">
      <fileset dir=".">
        <include name="**/spec/*.ast"/>
        <include name="**/spec/*.jrag"/>
        <include name="**/spec/*.jadd"/>
      </fileset>
    </jastadd>
  </target>

  <target name="scanner">
    <!-- generate the scanner, translating .flex to .java -->
    <jflex file="spec/StateMachineScanner.flex" outdir="${package}" nobak="yes"/>
  </target>

  <target name="parser">
    <!-- preprocess the parser, translating .parser to .beaver -->
    <java 
        classpath="${tools}/JastAddParser.jar:${tools}/beaver-rt.jar" 
        classname="Main" 
        fork="true">
      <arg value="--no-beaver-symbol" />
      <arg value="spec/StateMachineParser.parser" />
      <arg value="${package}/StateMachineParser.beaver" />
    </java>
    <!-- generate the parser, translating .beaver to .java -->
    <beaver file="${package}/StateMachineParser.beaver" terminalNames="yes" compress="no" useSwitch="yes"/>
  </target>

  <!-- Remove generated source files and .class files -->
  <target name="clean" depends="cleanGen">
    <!-- Delete all classfiles in dir and recursively in subdirectories -->
    <delete>
      <fileset dir="." includes="**/*.class"/>
    </delete>
  </target>

  <!-- Remove generated source files -->
  <target name="cleanGen">
    <delete dir="${package}"/>
    <delete dir="${test-reports.dir}"/>
  </target>

  <target name="test" depends="build" >
    <mkdir dir="${test-reports.dir}" />
    <junit>
      <classpath>
        <pathelement path="." />
        <pathelement path="${tools}/junit.jar" />
        <pathelement path="${tools}/beaver.jar" />
      </classpath>
      <formatter type="brief" usefile="false" />
      <formatter type="xml"/>

      <batchtest todir="${test-reports.dir}">
        <fileset dir=".">
          <include name="tests/*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="doc" depends="build" description="generate javadoc">
    <mkdir dir="doc"/>
    <javadoc 
        destdir="doc" 
        classpath=".:${tools}/beaver.jar" 
        sourcepath="." 
        packagenames="AST" 
        docletpath="${tools}/RagDoll.jar" 
        doclet="ragdoll.RagDollDoclet">
      <arg value="-linksource"/>
      <arg value="-ragroot"/>
      <arg value="."/>
    </javadoc>
  </target>
</project>
