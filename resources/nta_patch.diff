diff --git a/java4/frontend/NTAFinally.jrag b/java4/frontend/NTAFinally.jrag
index c5a2a8e..2cd87e2 100644
--- a/java4/frontend/NTAFinally.jrag
+++ b/java4/frontend/NTAFinally.jrag
@@ -30,38 +30,164 @@
 
 aspect NTAFinally {
   /** @return a copy of the block as an NTAFinallyBlock. */
-  protected static NTAFinallyBlock ASTNode.ntaFinallyBlock(FinallyHost origin,
-      Stmt branch, Block block) {
+protected
+  static NTAFinallyBlock ASTNode.ntaFinallyBlock(FinallyHost origin,
+                                                 Stmt branch, Block block) {
     NTAFinallyBlock ntaBlock = new NTAFinallyBlock(origin);
-    ntaBlock.addStmt((Block) block.treeCopyNoTransform());
+    ntaBlock.addStmt((Block)block.treeCopy());
     if (block.canCompleteNormally()) {
       FinallyHost enclosing = block.enclosingFinally(branch);
       if (enclosing != null) {
-        ntaBlock.addStmt(ntaFinallyBlock(enclosing, branch, enclosing.getFinallyBlock()));
+        ntaBlock.addStmt(
+            ntaFinallyBlock(enclosing, branch, enclosing.getFinallyBlock()));
       }
     }
     return ntaBlock;
   }
 
-  syn lazy Opt<Block> BreakStmt.getFinallyOpt() {
-    return branchFinallyOpt();
+protected
+  static NTAFinallyBlock ASTNode.ntaFinallyBlock(
+      FinallyHost origin, Stmt branch, Block block, TypeDecl type) {
+    Boolean canHandle = false;
+    if (origin instanceof TryStmt)
+      for (CatchClause cat : ((TryStmt)origin).getCatchClauses()) {
+        if (canHandle = cat.handles(type))
+          break;
+      }
+    NTAFinallyBlock ntaBlock = new NTAFinallyBlock(origin);
+    if (!canHandle) {
+      ntaBlock.addStmt((Block)block.treeCopyNoTransform());
+    } else {
+      return ntaBlock;
+    }
+
+    if (block.canCompleteNormally()) {
+      FinallyHost enclosing = block.enclosingFinally(branch);
+      if (enclosing != null) {
+        ntaBlock.addStmt(ntaFinallyBlock(enclosing, branch,
+                                         enclosing.getFinallyBlock(), type));
+      }
+    }
+    return ntaBlock;
   }
 
+  syn lazy Opt<Block> BreakStmt.getFinallyOpt() { return branchFinallyOpt(); }
+
   syn lazy Opt<Block> ContinueStmt.getFinallyOpt() {
     return branchFinallyOpt();
   }
 
-  syn lazy Opt<Block> ReturnStmt.getFinallyOpt() {
-    return branchFinallyOpt();
+  syn lazy Opt<Block> ReturnStmt.getFinallyOpt() { return branchFinallyOpt(); }
+
+  syn lazy Opt<Block> ThrowStmt.getFinallyOpt() {
+    return branchFinallyOpt(getExpr().type());
+  }
+  inh TryStmt CFGNode.getEnclosingTry();
+  inh TryStmt ContinueStmt.getEnclosingTry();
+  inh TryStmt BreakStmt.getEnclosingTry();
+  inh TryStmt FinallyHost.getEnclosingTry();
+  eq TryStmt.UncheckedExceptions().getEnclosingTry() = this;
+  eq TryWithResources.getResource().getEnclosingTry() = this;
+  eq TryWithResources.CatchClause().getEnclosingTry() = getEnclosingTry();
+  eq TryWithResources.getFinally().getEnclosingTry() = getEnclosingTry();
+  // eq TryStmt.getChild().getEnclosingTry() = getEnclosingTry();
+
+  eq TryStmt.getBlock().getEnclosingTry() = this;
+  eq TryStmt.CatchClause().getEnclosingTry() = getEnclosingTry();
+  eq TryStmt.getFinally().getEnclosingTry() = getEnclosingTry();
+  eq NTAFinallyBlock.getChild().getEnclosingTry() = null;
+  eq CompilationUnit.getChild().getEnclosingTry() = null;
+
+  inh TryStmt CFGNode.getActualTry();
+  eq TryStmt.CatchClause().getActualTry() = this;
+  eq CompilationUnit.getChild().getActualTry() = null;
+
+protected
+  static NTAFinallyBlock ASTNode.ntaFinallyBlockMethods(TryStmt origin,
+                                                        TypeDecl type) {
+    if (origin == null)
+      return null;
+    TryStmt enclosingTry = origin.getEnclosingTry();
+    Stmt finallyBlock = origin.getFinally();
+    for (CatchClause cat : origin.getCatchClauses()) {
+      if (cat.handles(type))
+        return null;
+    }
+    NTAFinallyBlock ntaBlock = new NTAFinallyBlock((FinallyHost)origin, type);
+    if (finallyBlock != null) {
+      ntaBlock.addStmt((Block)finallyBlock.treeCopyNoTransform());
+      if (finallyBlock.canCompleteNormally()) {
+        NTAFinallyBlock blk = ntaFinallyBlockMethods(enclosingTry, type);
+        if (blk != null)
+          ntaBlock.addStmt(blk);
+        return ntaBlock;
+      }
+    }
+    if (finallyBlock == null) {
+      if (enclosingTry != null) {
+        return ntaFinallyBlockMethods(enclosingTry, type);
+      }
+    }
+    return null;
+  }
+
+  syn nta List<Block> MethodAccess.getFinallyList() {
+    List<Block> res = new List();
+    TryStmt enclosingTry = getEnclosingTry();
+  outer:
+    for (Access a : decl().getExceptions()) {
+      Block blk = null;
+      boolean canHandle = false;
+      if (enclosingTry == null)
+        continue;
+      for (CatchClause cat : enclosingTry.getCatchClauses()) {
+        if (cat.handles(a.type())) {
+          // res.add(new NTAFinallyBlock((FinallyHost)enclosingTry, a.type()));
+          // continue outer;
+        }
+      }
+      blk = ntaFinallyBlockMethods(enclosingTry, a.type());
+      if (blk != null)
+        res.add(blk);
+      // else
+      //   res.add(new NTAFinallyBlock((FinallyHost)enclosingTry, a.type()));
+    }
+    return res;
+  }
+
+  syn nta List<Block> ClassInstanceExpr.getFinallyList() {
+    List<Block> res = new List();
+    TryStmt enclosingTry = getEnclosingTry();
+  outer:
+    for (Access a : decl().getExceptions()) {
+      Block blk = null;
+      boolean canHandle = false;
+      if (enclosingTry == null)
+        continue;
+      for (CatchClause cat : enclosingTry.getCatchClauses()) {
+        if (cat.handles(a.type())) {
+          res.add(new NTAFinallyBlock((FinallyHost)enclosingTry, a.type()));
+          continue outer;
+        }
+      }
+      blk = ntaFinallyBlockMethods(enclosingTry, a.type());
+      if (blk != null)
+        res.add(blk);
+      else
+        continue; // res.add(new NTAFinallyBlock((FinallyHost)enclosingTry,
+                  // a.type()));
+    }
+    return res;
   }
 
   /** Copy of the finally block for catch-all exception handling. */
   syn lazy Block TryStmt.getExceptionHandler() {
     if (hasNonEmptyFinally()) {
       NTAFinallyBlock ntaBlock = new NTAFinallyBlock(this);
-      ntaBlock.addStmt((Block) getFinally().treeCopyNoTransform());
+      ntaBlock.addStmt((Block)getFinally().treeCopyNoTransform());
       return ntaBlock;
     } else {
+      // return null; //
       return new NTAFinallyBlock();
     }
   }
@@ -70,18 +196,54 @@ aspect NTAFinally {
    * @return An Opt node containing the finally and monitor exit blocks
    * from the list of enclosing try-statements and synchronized blocks.
    */
-  public Opt<Block> Stmt.branchFinallyOpt() {
+public
+  Opt<Block> Stmt.branchFinallyOpt() {
     FinallyHost enclosing = enclosingFinally(this);
     if (enclosing != null) {
-      return new Opt<Block>(ntaFinallyBlock(enclosing, this, enclosing.getFinallyBlock()));
+      return new Opt<Block>(
+          ntaFinallyBlock(enclosing, this, enclosing.getFinallyBlock()));
     } else {
       return new Opt<Block>();
     }
   }
 
-  private FinallyHost NTAFinallyBlock.origin;
+public
+  Opt<Block> UncheckedExceptions.branchFinallyOpt() {
+    FinallyHost enclosing = enclosingFinally(this);
+    if (enclosing != null) {
+      return new Opt<Block>(
+          ntaFinallyBlock(enclosing, this, enclosing.getFinallyBlock()));
+    } else {
+      return new Opt<Block>();
+    }
+  }
+
+public
+  Opt<Block> Stmt.branchFinallyOpt(TypeDecl type) {
+    FinallyHost enclosing = enclosingFinally(this);
+    if (enclosing != null) {
+      return new Opt<Block>(
+          ntaFinallyBlock(enclosing, this, enclosing.getFinallyBlock(), type));
+    } else {
+      return new Opt<Block>();
+    }
+  }
+
+private
+  FinallyHost NTAFinallyBlock.origin;
+private
+  TypeDecl NTAFinallyBlock.type;
 
-  public NTAFinallyBlock.NTAFinallyBlock(FinallyHost finallyHost) {
+  syn FinallyHost NTAFinallyBlock.getOrigin() = origin;
+  syn TypeDecl NTAFinallyBlock.type() = type;
+
+public
+  NTAFinallyBlock.NTAFinallyBlock(FinallyHost finallyHost) {
+    this.origin = finallyHost;
+  }
+public
+  NTAFinallyBlock.NTAFinallyBlock(FinallyHost finallyHost, TypeDecl type) {
     this.origin = finallyHost;
+    this.type = type;
   }
 }
diff --git a/java4/grammar/Java.ast b/java4/grammar/Java.ast
index bbafd1e..4a50f21 100644
--- a/java4/grammar/Java.ast
+++ b/java4/grammar/Java.ast
@@ -87,7 +87,7 @@ VarAccess : Access ::= <ID:String>;
  * A method invocation/call expression.
  * The {@code type()} attribute computes the result type.
  */
-MethodAccess : Access ::= <ID:String> Arg:Expr*;
+MethodAccess : Access ::= <ID:String> Arg:Expr* /Finally:Block*/ /Close:NTACloseResource*/;
 
 /** A constructor invocation. */
 ConstructorAccess : Access ::= <ID:String> Arg:Expr*;
@@ -141,7 +141,7 @@ ParseName : Access;
  * <p> The Access child is either the class being constructed, or the supertype
  * for the anonymous class declaration.
  */
-ClassInstanceExpr : Access ::= Access Arg:Expr* [TypeDecl];
+ClassInstanceExpr : Access ::= Access Arg:Expr* [TypeDecl] /Finally:Block*/ /Close:NTACloseResource*/;
 
 ClassAccess : Access ::= ;
 
@@ -348,10 +348,10 @@ WhileStmt : BranchTargetStmt ::= Condition:Expr Stmt;
 DoStmt : BranchTargetStmt ::= Stmt Condition:Expr;
 ForStmt : BranchTargetStmt ::= InitStmt:Stmt* [Condition:Expr] UpdateStmt:Stmt* Stmt;
 
-BreakStmt : Stmt ::= <Label:String> /[Finally:Block]/;
-ContinueStmt : Stmt ::= <Label:String> /[Finally:Block]/;
-ReturnStmt : Stmt ::= [Result:Expr] /[Finally:Block]/;
-ThrowStmt : Stmt ::= Expr;
+BreakStmt : Stmt ::= <Label:String> /[Finally:Block]/ /Close:NTACloseResource*/;
+ContinueStmt : Stmt ::= <Label:String> /[Finally:Block]/ /Close:NTACloseResource*/;
+ReturnStmt : Stmt ::= [Result:Expr] /[Finally:Block]/ /Close:NTACloseResource*/;
+ThrowStmt : Stmt ::= Expr /[Finally:Block]/ /Close:NTACloseResource*/;
 
 SynchronizedStmt : Stmt ::= Expr Block /MonitorExit/;
 
